{"version":3,"sources":["Searchbar.js","Card.js","Cardlist.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Searchbar","searchfield","searchChange","className","type","placeholder","onChange","Card","props","alt","src","id","name","email","Cardlist","robots","cardlists","map","user","i","key","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobot","this","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kNAaeA,MAXf,YAA8C,EAA1BC,YAA2B,IAAfC,EAAc,EAAdA,aAC/B,OACE,6BACC,2BAAOC,UAAU,oCACjBC,KAAK,SACLC,YAAY,WACZC,SAAUJ,IAJX,gECSYK,MAXf,SAAcC,GACZ,OACC,yBAAKL,UAAU,yDACZ,yBAAKM,IAAI,QAAQC,IAAG,+BAA0BF,EAAMG,GAAhC,cACpB,6BACE,4BAAKH,EAAMI,MACX,4BAAKJ,EAAMK,UCWJC,MAff,YAA6B,IAAVC,EAAS,EAATA,OAEZC,EAAYD,EAAOE,KAAI,SAACC,EAAKC,GAClC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAE/E,OAEG,6BACIG,ICAOK,EAVA,SAACb,GACd,OACE,yBAAKc,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAArE,yEAEGjB,EAAMkB,SAFT,oFC2CWC,G,wDApCd,aAAc,IAAD,8BACZ,gBAaDC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAAE7B,YAAY4B,EAAME,OAAOC,SAdzC,EAAKC,MAAM,CACVlB,OAAO,GACPd,YAAY,IAJD,E,gEAQQ,IAAD,OACjBiC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAAEf,OAAQuB,S,+BAQpC,IAAD,OAEDC,EAAgBC,KAAKP,MAAMlB,OAAO0B,QAAO,SAAAC,GAC9C,OAAOA,EAAM9B,KAAK+B,cAAcC,SAAS,EAAKX,MAAMhC,YAAY0C,kBAGjE,OACE,yBAAKxC,UAAU,MACd,2CACA,kBAAC,EAAD,CAAWD,aAAcsC,KAAKZ,iBAC/B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUb,OAAQwB,U,GA/BLM,c,YCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,6BACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dfd22fb9.chunk.js","sourcesContent":["import React from 'react';\r\n// here searchfield refers to event which we are targeting\r\nfunction Searchbar({searchfield,searchChange}){\r\n\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<input className=\"pa3 ba b--green bg-lightest-green\" \r\n\t\t\t\ttype=\"search\" \r\n\t\t\t\tplaceholder=\"Search!!\"\r\n\t\t\t\tonChange={searchChange} />\r\n\t\t\t\t// triggers searchChange method of main app component event\r\n\t\t\t</div>\t\r\n\t);\r\n}\r\nexport default Searchbar;","import React from 'react';\n// using prop for card details and img src\nfunction Card(props) {\n  return (\n   <div className=\"tc bg-lightest-blue dib br3 pa3 ma3 grow bw2 shadow-5\">\n      <img alt=\"Robot\" src={`https://robohash.org/${props.id}?200x200`} />\n      <div>\n        <h2>{props.name}</h2>\n        <h3>{props.email}</h3>\n      </div>\n    </div>\n  );\n}\nexport default Card;\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nfunction Cardlist({robots}) {\r\n\t// mapping to json file amd showing cards\r\n\tconst cardlists = robots.map((user,i) => {\r\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\t\t\r\n\t})\r\n\treturn (\r\n\t\t// displaying\r\n\t\t\t\t<div>\r\n\t  \t\t\t\t{cardlists}\r\n\t  \t\t\t</div>\r\n\t  );\t\t\r\n\t}\r\n\r\n\t  \r\n\r\nexport default Cardlist;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n    // whole content can be accessed using props.children for an component\r\n      {props.children}\r\n      // thus using it to display in way we want by wrapping it with scroll component\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","//  ./ for current directory & ../foldername to change folder\r\nimport React, {Component} from 'react';\r\nimport Searchbar from './Searchbar';\r\nimport Cardlist from './Cardlist';\r\nimport { robots } from './robots';\r\nimport Scroll from './Scroll';\r\nimport './App.css';\r\n\r\n// state can be only accessed by class due to constructor. \r\n// State for dynamic and props for static storage\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots:[],\r\n\t\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\t// for after loading work use componentDidMount\r\n\tcomponentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(users => {this.setState({ robots: users})});\r\n  }\r\n  // Events or updates or own methods should be in parent mainly\r\n\tonSearchChange = (event) => {\r\n\t// arrow functions should be used for methods as this keyword refers to component in them\r\n\t\tthis.setState({ searchfield:event.target.value })\r\n\t\t\r\n\t}\r\n\trender(){\r\n\t\t// filtering\r\n\t\tconst filteredRobot = this.state.robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t\t})\r\n\t\t// displaying all components\r\n\t\treturn(\r\n\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t\t<h1>RoboFriends</h1>\r\n\t\t\t\t\t<Searchbar searchChange={this.onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<Cardlist robots={filteredRobot}/>\r\n\t\t\t\t</Scroll>\t\r\n\t\t\t\t</div>\t\r\n\t\t\t);\r\n\t\t}\t\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\"\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}